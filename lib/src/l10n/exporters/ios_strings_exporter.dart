import 'dart:io';

import 'package:alex/src/exception/run_exception.dart';
import 'package:alex/src/l10n/locale/locales.dart';
import 'package:alex/src/l10n/path_providers/l10n_ios_path_provider.dart';

import '../l10n_entry.dart';
import 'l10n_exporter.dart';

/// Export to iOS localization .strings file.
class IosStringsExporter extends L10nExporter<IosLocale> {
  final L10nIosPathProvider provider;
  final String projectName;
  final String xmlFileName;

  IosStringsExporter(this.provider, this.projectName, this.xmlFileName,
      super.locale, super.data);

  @override
  Future<bool> execute() async {
    final targetFileName = provider.getTargetFileName(xmlFileName);

    final date = DateTime.now().toIso8601String();
    final result = StringBuffer('''
/* 
  $targetFileName
  $projectName

  Autogenerated by alex on $date.
  Copyright Â© 2019 The Chromium Authors. All rights reserved.

  ! DO NOT EDIT MANUALLY !
*/
''');

    final headerLength = result.length;

    data.forEach((key, value) {
      result
        ..write('"')
        ..write(key)
        ..write('"="');

      if (value is L10nTextEntry) {
        result.write(_prepareStr(value.text));
      } else {
        throw Exception('Unhandled value type: ${value.runtimeType}');
      }

      result.writeln('";');
    });

    final iosLocale = locale;

    final target = await _requireTargetFile(iosLocale, targetFileName);
    final newContent = result.toString();

    return writeContentIfChanged(target, newContent,
        clear: (str) =>
            str.length >= headerLength ? str.substring(headerLength) : str);
  }

  Future<File> _requireTargetFile(
      IosLocale iosLocale, String targetFileName) async {
    File _getTargetFile(IosLocale l) =>
        provider.getLocalizationFile(projectName, l, targetFileName);
    Future<File?> _checkAltLocale(IosLocale altLocale) async {
      final altRes = _getTargetFile(altLocale);
      final altExist = await altRes.exists();
      return altExist ? altRes : null;
    }

    final res = _getTargetFile(iosLocale);
    final exist = await res.exists();

    if (!exist) {
      // process some locales which is not presented or different in ios
      for (final altLocale in iosLocale.getAltLocales()) {
        final altRes = await _checkAltLocale(altLocale);
        if (altRes != null) return altRes;
      }

      throw RunException.fileNotFound('Cannot find a file: ${res.path}');
    } else {
      return res;
    }
  }

  String _prepareStr(String text) {
    return text.replaceAll('"', r'\"').replaceAll('\n', r'\n');
  }
}
